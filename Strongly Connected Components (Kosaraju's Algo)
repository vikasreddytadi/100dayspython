#User function Template for python3

class Solution:
    
    #Function to find number of strongly connected components in the graph.
    def dfs1(self,v,adj,vis):
        vis[v]=1
        for i in adj[v]:
            if(vis[i]!=1):
                self.dfs1(i,adj,vis)
    def dfs(self,v,adj,vis,st):
        vis[v]=1
        for i in adj[v]:
            if(vis[i]!=1):
                self.dfs(i,adj,vis,st)
        st.append(v)
    def kosaraju(self, V, adj):
        vis=[0 for i in range(V)]
        vis1=[0 for i in range(V)]
        st=[]
        for i in range(V):
            if(vis[i]==0):
                self.dfs(i,adj,vis,st)
        adj1=[[] for i in range(V)]
        for i in range(len(adj)):
            for j in adj[i]:
                adj1[j].append(i)
        cnt=0
        while(st):
            i=st.pop()
            if(vis1[i]==0):
                cnt+=1
                self.dfs1(i,adj1,vis1)
        return cnt            
        

#{ 
#  Driver Code Starts
#Initial Template for Python 3

from collections import OrderedDict 
import sys 

sys.setrecursionlimit(10**6) 
if __name__ == '__main__':
    t = int(input())
    for i in range(t):
        V,E = list(map(int, input().strip().split()))
        adj = [[] for i in range(V)]
        for i in range(E):
            a,b = map(int,input().strip().split())
            adj[a].append(b)
        ob = Solution()
        
        print(ob.kosaraju(V, adj))
# } Driver Code Ends
